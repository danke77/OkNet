// publish to bintray
//
// classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.3'
// classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.5'
// classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
//
// apply from: 'https://raw.githubusercontent.com/danke77/bintray/master/bintray.gradle'
// gradle clean build bintrayUpload

group = POM_GROUP
version = POM_VERSION_NAME
project.archivesBaseName = POM_ARTIFACT_ID

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'
// apply plugin: 'org.jetbrains.dokka-android'

//dokka {
//    outputFormat = 'html'
//    outputDirectory = "$buildDir/javadoc"
//}

task cleanAar() {
    def projectName = getName()
    File file = new File("${projectName}/build/outputs/aar/")
    if (file.exists()) {
        file.deleteDir()
    }
}

task generateSourcesJar(type: Jar, dependsOn: cleanAar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    group = 'jar'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    excludes += '**/BuildConfig.java'
    excludes += '**/R.java'
    failOnError false
    options {
        encoding 'UTF-8'
        charSet 'UTF-8'
        author true
        version true
        links 'http://docs.oracle.com/javase/8/docs/api'
        title "${POM_NAME} ${POM_VERSION_NAME}"
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

//task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    group = 'jar'
//    description = 'Generates Kotlin API documentation.'
//    outputFormat = 'javadoc'
//    outputDirectory = javadoc.destinationDir
//}

//task dokkaJavadoc(type: org.gradle.api.tasks.Exec) {
//    group = 'jar'
//    workingDir '.'
//    ext.toolJarPath = '..' + File.separator + 'tools'
//    ext.dokkaJarPath = '..' + File.separator + 'tools' + File.separator + 'dokka-fatjar-0.9.17.jar'
//    ext.sourceDirs = "$workingDir" + File.separator + 'src' + File.separator + 'main'
//    ext.outputFormat = 'javadoc'
//    ext.outputDirectory = "$buildDir" + File.separator + 'docs' + File.separator + 'javadoc'
//
//    /**
//     * 这里输出格式可以为：html，markdown，jekyll，javadoc
//     * 如果是 javadoc 格式, 会用到 javadoc 的库,
//     * 如果 PATH 没有包含 JDK x.x.x/lib 路径的话, 就会报 'java.lang.ClassNotFoundException: com.sun.javadoc.DocErrorReporter' 异常
//     * 需要将这个路径加进来，或者将 JDK x.x.x/lib/tools.jar 文件拷贝出来，下面这个命令就是拷贝到了当前目录
//     */
//    // commandLine "java -Djava.ext.dirs=$toolJarPath -jar $dokkaJarPath $sourceDirs -format $outputFormat -output $outputDirectory"
//    commandLine "java -jar $dokkaJarPath $sourceDirs -format $outputFormat -output $outputDirectory"
//}

task generateJavadocJar(type: Jar, dependsOn: javadoc) {
    group = 'jar'
    // from dokkaJavadoc.outputDirectory
    from javadoc.destinationDir
    classifier = 'javadoc'
}

def pomConfig = {
    licenses {
        license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
        }
    }

    developers {
        developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
            email POM_DEVELOPER_EMAIL
        }
    }
}

/**
 * 不要移动这个 apply 的位置，否则有可能出现
 * ’Error: Cannot configure the ‘publishing’ extension after it has been accessed’
 * (don’t move this snippet code position)
 */
apply plugin: 'maven-publish'
publishing {
    publications {
        mavenKotlin(MavenPublication) {
            groupId POM_GROUP
            artifactId POM_ARTIFACT_ID
            version = POM_VERSION_NAME

            artifact generateSourcesJar
            artifact generateJavadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', POM_DESCRIPTION)
                root.children().last() + pomConfig

                def dependenciesNode = root.appendNode('dependencies')
                configurations.api.allDependencies.each {
                    if (it.group && it.name && it.version) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

afterEvaluate {
    publishing.publications.mavenKotlin.artifact(bundleRelease)
}

bintray {
    def USER
    def KEY

    File localPropertiesFile = new File(project.rootProject.file('local.properties'))
    if (localPropertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(localPropertiesFile.newDataInputStream())

        USER = properties.getProperty('bintray.user')
        KEY = properties.getProperty('bintray.apikey')
    } else {
        USER = System.getenv('bintray.user')
        KEY = System.getenv('bintray.apikey')
    }

    user = USER
    key = KEY

    publications = ['mavenKotlin']
    publish = true

    pkg {
        repo = 'maven'
        name = POM_NAME
        desc = POM_DESCRIPTION
        websiteUrl = POM_URL
        issueTrackerUrl = POM_SCM_ISSUE_TRACKER_URL
        vcsUrl = POM_SCM_CONNECTION
        licenses = [POM_LICENCE_NAME]
        publicDownloadNumbers = true
    }
}

artifactory {
    // maven { url "http://localhost:8080/artifactory/gradle-release-local" }
    contextUrl = 'http://oss.jfrog.org/artifactory' // 'http://localhost:8080/artifactory'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'gradle-release-local' //The Artifactory repository key to publish to
            username = bintray.user // JFrog的用户名
            password = bintray.key // JFrog登录密码
            // maven = true
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('mavenKotlin')
            publishArtifacts = true
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}
